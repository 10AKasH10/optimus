syntax = "proto3";
package apiv1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/odpf/optimus/proto/api/v1";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
      version: "1.0";
    };
    external_docs: {
      url: "https://github.com/odpf/optimus";
      description: "Optimus server";
    }
    schemes: HTTP;
};

service RuntimeService {
    rpc Version(VersionRequest) returns (VersionResponse) {
        option (google.api.http) = {
            post: "/api/v1/version"
            body: "*"
        };
    }
    rpc DeploySpecification(DeploySpecificationRequest) returns (stream DeploySpecificationResponse) {}
    rpc DumpSpecification(DumpSpecificationRequest) returns (DumpSpecificationResponse) {
        option (google.api.http) = {
            get: "/api/v1/project/{project_name}/job/{job_name}/dump"
        };
    }
    rpc RegisterProject(RegisterProjectRequest) returns (RegisterProjectResponse) {
        option (google.api.http) = {
            post: "/api/v1/project"
            body: "*"
        };
    }
    rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/project"
        };
    }

    // TODO
    // rpc ListJobs() returns () {}

    rpc RegisterInstance(RegisterInstanceRequest) returns (RegisterInstanceResponse) {
        option (google.api.http) = {
            post: "/api/v1/instance"
            body: "*"
        };
    }
    rpc JobStatus(JobStatusRequest) returns (JobStatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/project/{project_name}/job/{job_name}/status"
        };
    }
    rpc GetWindow(GetWindowRequest) returns (GetWindowResponse) {
        option (google.api.http) = {
            get: "/api/v1/window"
        };
    }
}

message VersionRequest {
    string client = 1;
}

message VersionResponse {
    string server = 1;
}

message DeploySpecificationRequest {
    string project_name = 1; // unique project identifier
    repeated JobSpecification jobs = 2;

    // TODO: not implemented yet, default behaviour is to treat this true always till then
    bool synchronize = 3; // deletes job that are not sent as part of this deployment
}

message DumpSpecificationRequest {
    string project_name = 1;
    string job_name = 2;
}

message ProjectSpecification {
    string name = 1;
    map<string, string> config = 2;
}

message JobSpecHook {
    string name = 1;
    repeated JobConfigItem config = 2;
}

message JobSpecification {
    int32 version = 1;
    string name = 2;
    string owner = 3;

    string start_date = 4;
    string end_date = 5;
    string interval = 6;

    bool depends_on_past = 7;
    bool catch_up = 8;

    string task_name = 9;
    repeated JobConfigItem config = 10;

    string window_size = 11;
    string window_offset = 12;
    string window_truncate_to = 13;

    repeated JobDependency dependencies = 14;
    map<string, string> assets = 15;
    repeated JobSpecHook hooks = 16;

    string description = 17;
    repeated JobLabelItem labels = 18;
}

message JobConfigItem {
    string name = 1;
    string value = 2;
}

message JobDependency {
    string name = 1;
    string type = 2;
}

message JobLabelItem {
    string name = 1;
    string value = 2;
}

message DeploySpecificationResponse {
    bool success = 1;

    // non ack responses are more of a progress/info response and
    // and not success or failure status
    bool ack = 2;

    string message = 3;
    string job_name = 4;
}

message DumpSpecificationResponse {
    bool success = 1;
    string content = 2;
}

message RegisterProjectRequest {
    ProjectSpecification project = 1;
}

message RegisterProjectResponse {
    bool success = 1;
    string message = 2;
}

message ListProjectsRequest {}

message ListProjectsResponse {
    repeated ProjectSpecification all = 1;
}

message InstanceSpec {
    string state = 1;
    google.protobuf.Timestamp scheduled_at = 2;
    repeated InstanceSpecData data = 3;
    string job_name = 4;
}

message InstanceSpecData {
    string name = 1;
    string value = 2;
    string task = 3;
    string type = 4;
}

message RegisterInstanceRequest {
    string project_name = 1;
    string job_name = 2;
    string type = 3;
    google.protobuf.Timestamp scheduled_at = 4;
}

message RegisterInstanceResponse {
    ProjectSpecification project = 1;
    JobSpecification job = 2;
    InstanceSpec instance = 3;
}

message JobStatusRequest {
    string project_name = 1;
    string job_name = 2;
}

message JobStatusResponse {
    repeated JobStatus all = 1;
}

message JobStatus {
    string state = 1;
    google.protobuf.Timestamp scheduled_at = 2;
}

message GetWindowRequest {
    google.protobuf.Timestamp scheduled_at = 1;
    string size = 2;
    string offset = 3;
    string truncate_to = 4;

}

message GetWindowResponse {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp end = 2;
}
